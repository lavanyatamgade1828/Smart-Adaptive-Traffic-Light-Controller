`timescale 1ns/1ps

module tb_smart_traffic_controller;

  reg clk;
  reg rst_n;
  reg [1:0] ns_density;
  reg [1:0] ew_density;

  wire ns_red, ns_yellow, ns_green;
  wire ew_red, ew_yellow, ew_green;
  wire [2:0] state_dbg;

  // DUT
  smart_traffic_controller #(
    .BASE_GREEN  (6),
    .DENSITY_STEP(4),
    .YELLOW_TIME (3),
    .ALL_RED_TIME(2)
  ) dut (
    .clk(clk),
    .rst_n(rst_n),
    .ns_density(ns_density),
    .ew_density(ew_density),
    .ns_red(ns_red),
    .ns_yellow(ns_yellow),
    .ns_green(ns_green),
    .ew_red(ew_red),
    .ew_yellow(ew_yellow),
    .ew_green(ew_green),
    .state_dbg(state_dbg)
  );

  // 100 MHz clock
  initial clk = 1'b0;
  always #5 clk = ~clk;

  // Simple progress print (no %s)
  always @(posedge clk) begin
    $display("t=%0t ns | state=%0d | NS(RYG)=%0d%0d%0d EW(RYG)=%0d%0d%0d | dens NS=%0d EW=%0d",
      $time,
      state_dbg,
      ns_red, ns_yellow, ns_green,
      ew_red, ew_yellow, ew_green,
      ns_density, ew_density
    );
  end

  // Assertions (keep them)
  always @(posedge clk) begin
    if (rst_n) begin
      if (ns_green && ew_green) begin
        $display("ASSERT FAIL @%0t: Both directions GREEN!", $time);
        $fatal;
      end
      if (ns_yellow && ew_yellow) begin
        $display("ASSERT FAIL @%0t: Both directions YELLOW!", $time);
        $fatal;
      end
    end
  end

  // Stimulus
  initial begin
    // Ensure known values before first time step
    rst_n      = 1'b0;
    ns_density = 2'd2; // NS high
    ew_density = 2'd0; // EW low

    // Startup banner (helps spot if TB is actually running)
    $display("TB start @ %0t", $time);

    repeat (3) @(posedge clk);
    rst_n = 1'b1;

    repeat (40) @(posedge clk);

    $display("\n-- Changing densities: NS low, EW very high --\n");
    ns_density = 2'd0;
    ew_density = 2'd3;
    repeat (50) @(posedge clk);

    $display("\n-- Changing densities: both medium --\n");
    ns_density = 2'd1;
    ew_density = 2'd1;
    repeat (40) @(posedge clk);

    $display("\nSimulation finished OK.");
    $finish;
  end

endmodule
